//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
public:
    void findLPS(string pat , vector<int> &lps) {
        int n = pat.size();
        
        lps[0] = 0;
        int i = 1;
        int len = 0;
        
        while(i < n) {
            if(pat[i] == pat[len]) {
                len++;
                lps[i] = len;
                i++;
            }
            else {
                if(len != 0) {
                    len = lps[len-1];
                }
                else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    } 
    
    vector <int> search(string pat, string txt)
    {
        //code here
        int n = txt.size();
        int m = pat.size();
        
        vector<int> ans;
        vector<int> lps(m , 0);
    
        int i = 0;
        int j = 0;
        int len = 0;
        findLPS(pat , lps);
        
        while(i < n) {
            if(pat[j] == txt[i]) {
                i++;
                j++;
            }
            
            if(j == m) {
                ans.push_back(i-j+1);
                j = lps[j-1];
            }
            else if(i<n and txt[i] != pat[j]) {
                if(j != 0) j = lps[j-1];
                else i++;
            }
        }
        
        return ans;
    }
 
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        string S, pat;
        cin >> S >> pat;
        Solution ob;
        vector <int> res = ob.search(pat, S);
        if (res.size()==0)
            cout<<-1<<endl;
        else {
            for (int i : res) cout << i << " ";
            cout << endl;
        }
    }
    return 0;
}

// Contributed By: Pranay Bansal

// } Driver Code Ends